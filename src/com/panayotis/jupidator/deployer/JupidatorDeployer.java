/*
 * JupidatorDeployer.java
 *
 * Created on September 29, 2008, 5:10 PM
 */
package com.panayotis.jupidator.deployer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author  teras
 */
public class JupidatorDeployer extends JFrame {

    public static final String EXTENSION = ".updated";

    public void initGUI() {
        initComponents();
        ProgressBar.putClientProperty("JProgressBar.style", "circular");
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        TextL = new javax.swing.JLabel();
        ProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        setUndecorated(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 12, 8, 12));
        jPanel1.setLayout(new java.awt.BorderLayout(12, 0));

        TextL.setText("Please wait while deploying files");
        jPanel1.add(TextL, java.awt.BorderLayout.WEST);

        ProgressBar.setIndeterminate(true);
        ProgressBar.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel1.add(ProgressBar, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String[] args) {

        BufferedWriter out = null;
        try {
            JupidatorDeployer f = new JupidatorDeployer();
            f.initGUI();
            out = new BufferedWriter(new FileWriter("/tmp/jub"));

            out.write("Start here");
            out.newLine();
            for (int i = 0; i < args.length; i++) {
                boolean rm = args[i].charAt(0) == '-';
                String path = args[i].substring(1, args[i].length());
                if (rm) {
                    new File(path).delete();
                    out.write("Deleting file " + path);
                    out.newLine();
                } else {
                    String oldpath = path.substring(0, path.length() - EXTENSION.length());
                    File oldfile = new File(oldpath);
                    File newfile = new File(path);
                    
                    oldfile.delete();
                    out.write("Deleting file " + oldfile);
                    out.newLine();
                    out.write("Exists? " + oldfile.exists() + " " + newfile.exists());
                    out.newLine();
                    newfile.renameTo(oldfile);
                    out.write("renaming " + path + " to " + oldfile);
                    out.newLine();
                    out.write("Exists? " + oldfile.exists() + " " + newfile.exists());
                    out.newLine();
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(JupidatorDeployer.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(JupidatorDeployer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.exit(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JLabel TextL;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

}
